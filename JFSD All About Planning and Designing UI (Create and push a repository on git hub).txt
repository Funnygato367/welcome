JFSD: All About Planning and Designing UI 
First class notes:

Agile: 

Welcome to Git and Github Repository

Step:1 download git from Link: https://git-scm.com/downloads

Step:2 to create github account

Step:3 to create a remote reposiroty 

Step:4 create folder in your local machine that you want to upload in github

Step:5 copy the commands from git repository

Step:6 git commands

1. git init

2. git branch -M main

3. git remote add origin https://github.com/Nikunj-Java/test.git

4. for the very first time it will ask for global username and email so you need to provide
	git config --global user.email "you@example.com"
	git config --global user.name "Your Name"

5. git add .

6. git commit -m "Your Message"

7. git push -u origin main


Commands in cmd to add a repository to git hub:

Microsoft Windows [Version 10.0.22631.5039]
(c) Microsoft Corporation. All rights reserved.

C:\2025\JAVA FSD 2025>git init
Initialized empty Git repository in C:/2025/JAVA FSD 2025/.git/

C:\2025\JAVA FSD 2025>git branch - M main
usage: git branch [<options>] [-r | -a] [--merged] [--no-merged]
   or: git branch [<options>] [-f] [--recurse-submodules] <branch-name> [<start-point>]
   or: git branch [<options>] [-l] [<pattern>...]
   or: git branch [<options>] [-r] (-d | -D) <branch-name>...
   or: git branch [<options>] (-m | -M) [<old-branch>] <new-branch>
   or: git branch [<options>] (-c | -C) [<old-branch>] <new-branch>
   or: git branch [<options>] [-r | -a] [--points-at]
   or: git branch [<options>] [-r | -a] [--format]

Generic options
    -v, --[no-]verbose    show hash and subject, give twice for upstream branch
    -q, --[no-]quiet      suppress informational messages
    -t, --[no-]track[=(direct|inherit)]
                          set branch tracking configuration
    -u, --[no-]set-upstream-to <upstream>
                          change the upstream info
    --[no-]unset-upstream unset the upstream info
    --[no-]color[=<when>] use colored output
    -r, --remotes         act on remote-tracking branches
    --contains <commit>   print only branches that contain the commit
    --no-contains <commit>
                          print only branches that don't contain the commit
    --[no-]abbrev[=<n>]   use <n> digits to display object names

Specific git-branch actions:
    -a, --all             list both remote-tracking and local branches
    -d, --[no-]delete     delete fully merged branch
    -D                    delete branch (even if not merged)
    -m, --[no-]move       move/rename a branch and its reflog
    -M                    move/rename a branch, even if target exists
    --[no-]omit-empty     do not output a newline after empty formatted refs
    -c, --[no-]copy       copy a branch and its reflog
    -C                    copy a branch, even if target exists
    -l, --[no-]list       list branch names
    --[no-]show-current   show current branch name
    --[no-]create-reflog  create the branch's reflog
    --[no-]edit-description
                          edit the description for the branch
    -f, --[no-]force      force creation, move/rename, deletion
    --merged <commit>     print only branches that are merged
    --no-merged <commit>  print only branches that are not merged
    --[no-]column[=<style>]
                          list branches in columns
    --[no-]sort <key>     field name to sort on
    --[no-]points-at <object>
                          print only branches of the object
    -i, --[no-]ignore-case
                          sorting and filtering are case insensitive
    --[no-]recurse-submodules
                          recurse through submodules
    --[no-]format <format>
                          format to use for the output
git remote add origin https://github.com/Funnygato367/Project gitbash.git

C:\2025\JAVA FSD 2025>git branch -M main

C:\2025\JAVA FSD 2025>git remote add origin https://github.com/Funnygato367/JAVA-FSD-2025.git

C:\2025\JAVA FSD 2025>git remote add origin https://github.com/Funnygatato36JAVA-FSD-2025.git
error: remote origin already exists.

C:\2025\JAVA FSD 2025>git add .

C:\2025\JAVA FSD 2025>git commit -m "First Commit"
[main (root-commit) bff2d12] First Commit
 1 file changed, 1 insertion(+)
 create mode 100644 Phase 1/Session 1/Git notes.txt

C:\2025\JAVA FSD 2025>git push -u origin main
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Writing objects: 100% (5/5), 342 bytes | 114.00 KiB/s, done.
Total 5 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)
To https://github.com/Funnygato367/JAVA-FSD-2025.git
 * [new branch]      main -> main
branch 'main' set up to track 'origin/main'.

C:\2025\JAVA FSD 2025>
git remote add origin https://github.com/Funnygato367/welcome.txt.git
git remote add origin https://github.com/Funnygato367/welcome.txt


Git bash:

git --version

git config --list

-------------------------------------------------------------

$ git --version

git version 2.48.1.windows.1


User@DESKTOP-CRK8ANJ MINGW64 /

$ git config --list

diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
http.sslbackend=schannel
core.autocrlf=true
core.fscache=true
core.symlinks=false
pull.rebase=false
credential.helper=manager
credential.https://dev.azure.com.usehttppath=true
init.defaultbranch=main
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
filter.lfs.clean=git-lfs clean -- %f
user.name=Funnygato367
user.email=dariza367@gmail.com



Create the folder and add some files to its 
step 1: initialize the git hub repository
> git init
step 2: create some file and add it to the folder
> echo "Hello world!" > file.txt
or simpli you can create the files directly in the folder
step 3: add the file or file to the stagging area (to prepare the file to get ready to move to the remote repository) 
>git add <filename>
>git add .          // . represents all files
> ls               // list of files available
Step 4: create the snapshot of the file
> git commit -m "Commit Messages"

Step 5: check the logs of commits
> git log             // full logs of all the files within the folder
> git log --oneline  //short logs in one line only

Commands:


User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ echo "My name is David" > name.txt

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ ls
README.md  file.txt  name.txt  welcome.txt

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git add file.txt

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git init
Reinitialized existing Git repository in C:/Users/User/Desktop/Project gigit/

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git status
On branch main
Your branch is up to date with 'origin/main'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   file.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        name.txt


User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git rm --cached file.txt
rm 'file.txt'

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git status
On branch main
Your branch is up to date with 'origin/main'.

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        file.txt
        name.txt

nothing added to commit but untracked files present (use "git add" to track)

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git commit -m "file created"
On branch main
Your branch is up to date with 'origin/main'.

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        file.txt
        name.txt

nothing added to commit but untracked files present (use "git add" to track)

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git add file.txt
warning: in the working copy of 'file.txt', LF will be replaced by CRLF the next time Git touches it

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git status
On branch main
Your branch is up to date with 'origin/main'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   file.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        name.txt


User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git commit -m "file created"
[main 9d9e586] file created
 1 file changed, 1 insertion(+)
 create mode 100644 file.txt

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git status
On branch main
Your branch is ahead of 'origin/main' by 1 commit.
  (use "git push" to publish your local commits)

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        name.txt

nothing added to commit but untracked files present (use "git add" to track)

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git log
commit 9d9e586d201fd82ee2025dc81a7be6f3d052ba62 (HEAD -> main)
Author: Funnygato367 <dariza367@gmail.com>
Date:   Wed Mar 19 16:37:34 2025 -0400

    file created

commit 3a6de858f6cd0feff7aa9875b2e421a89a9c6b6e (origin/main)
Author: Funnygato367 <dariza367@gmail.com>
Date:   Wed Mar 19 15:26:42 2025 -0400

    first commit

commit 5c9f641ba8a613946b46859362674eed1a390f20
Author: Funnygato367 <dariza367@gmail.com>
Date:   Wed Mar 19 15:06:10 2025 -0400

    First Commit

--------------------------------------------------------------------

Changing Head and main(master):

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ echo "My name is David" > name.txt

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ ls
README.md  file.txt  name.txt  welcome.txt

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git add file.txt

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git init
Reinitialized existing Git repository in C:/Users/User/Desktop/Project gigit/

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git status
On branch main
Your branch is up to date with 'origin/main'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   file.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        name.txt


User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git rm --cached file.txt
rm 'file.txt'

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git status
On branch main
Your branch is up to date with 'origin/main'.

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        file.txt
        name.txt

nothing added to commit but untracked files present (use "git add" to track)

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git commit -m "file created"
On branch main
Your branch is up to date with 'origin/main'.

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        file.txt
        name.txt

nothing added to commit but untracked files present (use "git add" to track)

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git add file.txt
warning: in the working copy of 'file.txt', LF will be replaced by CRLF the next time Git touches it

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git status
On branch main
Your branch is up to date with 'origin/main'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   file.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        name.txt


User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git commit -m "file created"
[main 9d9e586] file created
 1 file changed, 1 insertion(+)
 create mode 100644 file.txt

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git status
On branch main
Your branch is ahead of 'origin/main' by 1 commit.
  (use "git push" to publish your local commits)

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        name.txt

nothing added to commit but untracked files present (use "git add" to track)

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git log
commit 9d9e586d201fd82ee2025dc81a7be6f3d052ba62 (HEAD -> main)
Author: Funnygato367 <dariza367@gmail.com>
Date:   Wed Mar 19 16:37:34 2025 -0400

    file created

commit 3a6de858f6cd0feff7aa9875b2e421a89a9c6b6e (origin/main)
Author: Funnygato367 <dariza367@gmail.com>
Date:   Wed Mar 19 15:26:42 2025 -0400

    first commit

commit 5c9f641ba8a613946b46859362674eed1a390f20
Author: Funnygato367 <dariza367@gmail.com>
Date:   Wed Mar 19 15:06:10 2025 -0400

    First Commit

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git add file.txt

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git commit -m "text added to the file"
On branch main
Your branch is ahead of 'origin/main' by 1 commit.
  (use "git push" to publish your local commits)

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        name.txt

nothing added to commit but untracked files present (use "git add" to track)

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git log
commit 9d9e586d201fd82ee2025dc81a7be6f3d052ba62 (HEAD -> main)
Author: Funnygato367 <dariza367@gmail.com>
Date:   Wed Mar 19 16:37:34 2025 -0400

    file created

commit 3a6de858f6cd0feff7aa9875b2e421a89a9c6b6e (origin/main)
Author: Funnygato367 <dariza367@gmail.com>
Date:   Wed Mar 19 15:26:42 2025 -0400

    first commit

commit 5c9f641ba8a613946b46859362674eed1a390f20
Author: Funnygato367 <dariza367@gmail.com>
Date:   Wed Mar 19 15:06:10 2025 -0400

    First Commit

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git log --oneline
9d9e586 (HEAD -> main) file created
3a6de85 (origin/main) first commit
5c9f641 First Commit

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git commit -m "text added to the file"
On branch main
Your branch is ahead of 'origin/main' by 1 commit.
  (use "git push" to publish your local commits)

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        name.txt

nothing added to commit but untracked files present (use "git add" to track)

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git add name.txt
warning: in the working copy of 'name.txt', LF will be replaced by CRLF the next time Git touches it

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git commit -m "text added to the file"
[main b148023] text added to the file
 1 file changed, 1 insertion(+)
 create mode 100644 name.txt

User@DESKTOP-CRK8ANJ MINGW64 ~/Desktop/Project gitbash (main)
$ git log --oneline
b148023 (HEAD -> main) text added to the file
9d9e586 file created
3a6de85 (origin/main) first commit
5c9f641 First Commit

-------------------------------------------------------------------
Table: Example:                     

Parent: nil 
author: Nikunj Soni
message: "First commit"

Table: Example:                     

Parent: SHA:
author: Nikunj Soni
message: "Second commit"

Table: Example:                     

Parent: SHA: 
author: Nikunj Soni
message: "Third commit"


















